// <auto-generated />
using System;
using Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    [Migration("20250526072929_add event image")]
    partial class addeventimage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("902c34d2-5a4d-43be-82fd-98ce1cc927bb"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("649d7a76-56a2-4342-a8bf-f3b95ef4c4f6"),
                            Name = "Art"
                        },
                        new
                        {
                            Id = new Guid("a5da6417-26f9-4b69-8365-010f0772f31f"),
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("Data.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TicketPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-0001-0000-0000-000000000001"),
                            CategoryId = new Guid("902c34d2-5a4d-43be-82fd-98ce1cc927bb"),
                            Description = "En klassisk musikupplevelse med Stockholms filharmoniker.",
                            EndDateTime = new DateTime(2025, 10, 12, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2025, 10, 12, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 350.00m,
                            Title = "Beethoven i Blå Hallen",
                            TotalTickets = 3500,
                            VenueId = new Guid("e1b5f8c0-0001-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("11111111-0002-0000-0000-000000000002"),
                            CategoryId = new Guid("649d7a76-56a2-4342-a8bf-f3b95ef4c4f6"),
                            Description = "Utforska samtida konst från lokala och internationella konstnärer.",
                            EndDateTime = new DateTime(2025, 9, 5, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2025, 9, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 150.00m,
                            Title = "Göteborgs Modern Art Expo",
                            TotalTickets = 3500,
                            VenueId = new Guid("e1b5f8c0-0002-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("11111111-0003-0000-0000-000000000003"),
                            CategoryId = new Guid("a5da6417-26f9-4b69-8365-010f0772f31f"),
                            Description = "Standup-komedi av en av Sveriges roligaste röster.",
                            EndDateTime = new DateTime(2025, 11, 1, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2025, 11, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 220.00m,
                            Title = "Skrattfest med Anna Svensson",
                            TotalTickets = 3500,
                            VenueId = new Guid("e1b5f8c0-0003-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("11111111-0004-0000-0000-000000000004"),
                            CategoryId = new Guid("902c34d2-5a4d-43be-82fd-98ce1cc927bb"),
                            Description = "En intim kväll med svenska jazzlegender.",
                            EndDateTime = new DateTime(2025, 8, 22, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2025, 8, 22, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 275.00m,
                            Title = "Jazzkväll i Uppsala",
                            TotalTickets = 3500,
                            VenueId = new Guid("e1b5f8c0-0003-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("11111111-0005-0000-0000-000000000005"),
                            CategoryId = new Guid("649d7a76-56a2-4342-a8bf-f3b95ef4c4f6"),
                            Description = "En utställning som fokuserar på AI och digital konst.",
                            EndDateTime = new DateTime(2025, 12, 3, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2025, 12, 3, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 180.00m,
                            Title = "Digital Art Now",
                            TotalTickets = 3500,
                            VenueId = new Guid("e1b5f8c0-0001-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("11111111-0006-0000-0000-000000000006"),
                            CategoryId = new Guid("a5da6417-26f9-4b69-8365-010f0772f31f"),
                            Description = "Ett humoristiskt scenprogram med sketcher och improvisation.",
                            EndDateTime = new DateTime(2025, 9, 18, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2025, 9, 18, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 200.00m,
                            Title = "Humorkväll med Jonas & Mia",
                            TotalTickets = 3500,
                            VenueId = new Guid("e1b5f8c0-0002-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Data.Entities.VenueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1b5f8c0-0001-0000-0000-000000000001"),
                            Address = "Hötorget 8",
                            City = "Stockholm",
                            Name = "Stockholm Konserthus",
                            PostalCode = "111 57"
                        },
                        new
                        {
                            Id = new Guid("e1b5f8c0-0002-0000-0000-000000000002"),
                            Address = "Christina Nilssons Gata",
                            City = "Göteborg",
                            Name = "Göteborgs Operan",
                            PostalCode = "411 04"
                        },
                        new
                        {
                            Id = new Guid("e1b5f8c0-0003-0000-0000-000000000003"),
                            Address = "Vaksala torg 1",
                            City = "Uppsala",
                            Name = "Uppsala Konsert & Kongress",
                            PostalCode = "753 31"
                        });
                });

            modelBuilder.Entity("Data.Entities.EventEntity", b =>
                {
                    b.HasOne("Data.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
